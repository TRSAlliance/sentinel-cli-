name: 🛡️ TRS Sentinel Deploy (Verified)
on:
  push:
    branches: [main, master]
    paths-ignore: ['**.md', 'docs/**']
  pull_request:
    branches: [main, master]

env:
  TRS_DEPLOY_ID: ${{ github.run_id }}-${{ github.run_attempt }}
  TRS_TIMESTAMP: ${{ steps.get-timestamp.outputs.iso8601 }}
  FIREBASE_PROJECT: ${{ secrets.FIREBASE_PROJECT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      status: ${{ steps.verify-deploy.outputs.status }}
      pulse-commit: ${{ steps.commit-pulse.outputs.commit-sha }}
      artifacts-url: ${{ steps.upload-artifacts.outputs.url }}

    steps:
    - name: ⏱️ Set Deployment Timestamp
      id: get-timestamp
      run: echo "iso8601=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

    - name: 🔍 Checkout Code (Full Depth)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for git history in pulse files

    - name: 🏗️ Setup Node.js (Cached)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: 📦 Install Dependencies (Strict)
      run: |
        npm ci --audit=false --fund=false
        echo "NPM_VERSION=$(npm --version)" >> $GITHUB_ENV

    - name: 🔨 Build with Integrity Check
      id: build
      run: |
        # Build with maximum warnings
        npm run build -- --strict
        
        # Validate build artifacts
        BUILD_DIR=$(jq -r '.hosting.public' firebase.json || echo "build")
        if [ ! -d "$BUILD_DIR" ]; then
          echo "::error::Build failed - missing directory: $BUILD_DIR"
          exit 1
        fi
        
        # Generate build manifest
        find "$BUILD_DIR" -type f -exec sha256sum {} \; > build-manifest.txt
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV

    - name: 🧪 Run Security Scans
      run: |
        npm audit --production --json > audit.json || true
        npx snyk test --all-projects --json > snyk.json || true

    - name: 🚀 Deploy to Firebase (Validated)
      id: firebase-deploy
      if: github.ref == 'refs/heads/main'
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_AUTH_TOKEN }}
      run: |
        set -eo pipefail
        
        # Install specific firebase-tools version
        npm install -g firebase-tools@12.4.0
        
        # Validate firebase.json configuration
        if ! jq -e '.hosting' firebase.json >/dev/null; then
          echo "::error::Invalid firebase.json - missing hosting config"
          exit 1
        fi
        
        # Deploy with debug logging
        firebase deploy --only hosting --project $FIREBASE_PROJECT --debug 2> firebase-debug.log
        
        # Extract deployment URL
        DEPLOY_URL=$(grep -o 'https://.*\.web\.app' firebase-debug.log | tail -1)
        echo "FIREBASE_URL=$DEPLOY_URL" >> $GITHUB_ENV
        echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT

    - name: 🌐 Deploy to Netlify (Validated)
      id: netlify-deploy
      if: github.ref == 'refs/heads/main'
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      run: |
        set -eo pipefail
        npm install -g netlify-cli@12.0.0
        
        # Deploy with timeout
        timeout 300 netlify deploy \
          --dir="${{ env.BUILD_DIR }}" \
          --prod \
          --site="${{ secrets.NETLIFY_SITE_ID }}" \
          --json > netlify-output.json
        
        # Parse JSON output
        DEPLOY_URL=$(jq -r '.deploy_url' netlify-output.json)
        echo "NETLIFY_URL=$DEPLOY_URL" >> $GITHUB_ENV
        echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT

    - name: 🩺 Post-Deploy Verification
      id: verify-deploy
      if: github.ref == 'refs/heads/main'
      run: |
        set -eo pipefail
        
        # Verify Firebase deployment
        if [ -n "${{ env.FIREBASE_URL }}" ]; then
          echo "::group::🔥 Firebase Verification"
          curl -sSfL "${{ env.FIREBASE_URL }}/version.json" | jq .
          echo "::endgroup::"
        fi
        
        # Verify Netlify deployment
        if [ -n "${{ env.NETLIFY_URL }}" ]; then
          echo "::group::🌐 Netlify Verification"
          curl -sSfL "${{ env.NETLIFY_URL }}/api/healthcheck" | jq .
          echo "::endgroup::"
        fi
        
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 📊 Generate TRS Pulse
      id: generate-pulse
      if: always()
      run: |
        # Calculate duration
        START_TIME=$(date -d "${{ env.TRS_TIMESTAMP }}" +%s)
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        
        # Create detailed pulse file
        jq -n \
          --arg deployId "${{ env.TRS_DEPLOY_ID }}" \
          --arg status "${{ steps.verify-deploy.outputs.status || 'failed' }}" \
          --argjson duration $DURATION \
          '{
            "metadata": {
              "system": "TRS-Sentinel",
              "version": "2.3",
              "deployId": $deployId,
              "timestamp": "${{ env.TRS_TIMESTAMP }}",
              "durationSeconds": $duration
            },
            "build": {
              "node": "${{ env.NPM_VERSION }}",
              "directory": "${{ env.BUILD_DIR }}",
              "files": $(find "${{ env.BUILD_DIR }}" -type f | wc -l)
            },
            "deploy": {
              "firebase": {
                "status": "${{ env.FIREBASE_STATUS }}",
                "url": "${{ env.FIREBASE_URL }}"
              },
              "netlify": {
                "status": "${{ env.NETLIFY_STATUS }}",
                "url": "${{ env.NETLIFY_URL }}"
              }
            },
            "security": {
              "npmAudit": $(jq -c . audit.json),
              "snykScan": $(jq -c . snyk.json)
            },
            "creedy": {
              "status": "${{ env.CREEDY_STATUS }}",
              "checksum": "$(sha256sum build-manifest.txt | cut -d" " -f1)"
            }
          }' > trs-pulse.json
        
        # Create human-readable log
        echo "📌 TRS Deployment Pulse" > deploy-report.md
        echo "---------------------" >> deploy-report.md
        echo "- 🆔 **Deploy ID**: ${{ env.TRS_DEPLOY_ID }}" >> deploy-report.md
        echo "- ⏱️ **Duration**: $DURATION seconds" >> deploy-report.md
        echo "- 🔥 **Firebase**: ${{ env.FIREBASE_URL || 'N/A' }}" >> deploy-report.md
        echo "- 🌐 **Netlify**: ${{ env.NETLIFY_URL || 'N/A' }}" >> deploy-report.md

    - name: 📦 Archive Artifacts
      id: upload-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: trs-deploy-${{ env.TRS_DEPLOY_ID }}
        path: |
          trs-pulse.json
          deploy-report.md
          build-manifest.txt
          firebase-debug.log
          netlify-output.json

    - name: 🔒 Commit Pulse to Sentinel Branch
      id: commit-pulse
      if: always()
      run: |
        git config --global user.name "TRS Sentinel"
        git config --global user.email "sentinel@trsalliance.com"
        
        git switch --orphan deploy-pulses || git switch deploy-pulses
        git pull --rebase origin deploy-pulses || echo "No existing branch"
        
        mkdir -p .trs/pulses
        cp trs-pulse.json .trs/pulses/trs-pulse-${{ env.TRS_DEPLOY_ID }}.json
        cp deploy-report.md .trs/pulses/report-${{ env.TRS_DEPLOY_ID }}.md
        
        git add .trs/
        git commit -m "📌 TRS Pulse: ${{ env.TRS_DEPLOY_ID }}"
        git push origin deploy-pulses
        
        echo "commit-sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: 🚨 Fail on Verification Issues
      if: steps.verify-deploy.outputs.status != 'success'
      run: |
        echo "::error::TRS Deployment Verification Failed"
        echo "Pulse File: https://github.com/${{ github.repository }}/blob/deploy-pulses/.trs/pulses/trs-pulse-${{ env.TRS_DEPLOY_ID }}.json"
        exit 1

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📢 Notify Deployment Status
        run: |
          echo "TRS Deployment ${{ needs.deploy.result }}"
          echo "Pulse: https://github.com/${{ github.repository }}/blob/deploy-pulses/.trs/pulses/trs-pulse-${{ needs.deploy.outputs.TRS_DEPLOY_ID }}.json"
          echo "Artifacts: ${{ needs.deploy.outputs.artifacts-url }}"
